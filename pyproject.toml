[tool.poetry]
name = "jira2confluence-gantt"
version = "0.3.3"
authors = ["Christophe Le Douarec <christophe.ledouarec@qorvo.com>"]
description = "Gantt chart generator from Jira to Confluence"
readme = "README.md"
repository = "https://github.com/cledouarec/jira2confluence-gantt"
license = "Apache-2.0"
keywords = [
  "project", 
  "management",
  "visualization",
  "gantt",
  "jira",
  "confluence",
  "atlassian"
]
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Topic :: Office/Business :: Scheduling",
    "Topic :: Utilities",
]
packages = [{include = "jira2confluencegantt"}]

[tool.poetry.dependencies]
python = "^3.10"
anytree = "^2.12.1"
atlassian-python-api = "^3.41.10"
Jinja2 = "^3.1.3"
python-dateutil = "^2.8.2"
PyYAML = "^6.0.1"
pydantic = "^2.6.3"
pydantic-settings = "^2.2.1"

[tool.poetry.group.dev.dependencies]
coverage = "^7.4.2"
pre-commit = "^3.6.2"
pylint = "^3.0.3"
pytest = "^8.0.1"
pytest-cov = "^4.1.0"
ruff = "^0.2.2"

[tool.poetry.scripts]
jira2confluence-gantt = "jira2confluencegantt.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.3.3"
version_files = [
    "jira2confluencegantt/__init__.py:__version__",
    "pyproject.toml:^version"
]
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

[tool.ruff]
target-version = "py310"
line-length = 79

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 79

[tool.ruff.lint]
preview = true
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # mccabe
    "C90",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-annotations
    # "ANN",
    # flake8-async
    "ASYNC",
    # flake8-trio
    "TRIO",
    # flake8-bandit
    "S",
    # flake8-blind-except
    # "BLE",
    # flake8-boolean-trap
    "FBT",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-copyright
    # "CPY",
    # flake8-comprehensions
    "C4",
    # flake8-datetimez
    "DTZ",
    # flake8-debugger
    "T10",
    # flake8-django
    "DJ",
    # flake8-errmsg
    "EM",
    # flake8-executable
    "EXE",
    # flake8-future-annotations
    "FA",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-import-conventions
    "ICN",
    # flake8-logging-format
    "G",
    # flake8-no-pep420
    "INP",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-self
    "SLF",
    # flake8-slots
    "SLOT",
    # flake8-simplify
    "SIM",
    # flake8-tidy-imports
    "TID",
    # flake8-type-checking
    "TCH",
    # flake8-gettext
    "INT",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # flake8-todos
    "TD",
    # flake8-fixme
    "FIX",
    # eradicate
    "ERA",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
    # Pylint
    # "PL",
    # tryceratops
    # "TRY",
    # flynt
    "FLY",
    # NumPy-specific rules
    "NPY",
    # Airflow
    "AIR",
    # Perflint
    "PERF",
    # refurb
    "FURB",
    # flake8-logging
    "LOG",
    # Ruff-specific rules
    "RUF",
]

[tool.ruff.lint.per-file-ignores]
#"__init__.py" = ["E402"]
"tests/*" = ["INP001"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"
